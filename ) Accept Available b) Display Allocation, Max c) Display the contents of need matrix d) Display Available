#include <stdio.h>
void calculateNeedMatrix(int need[][10], int max[][10], int allocation[][10], int m, int n) {
for (int i = 0; i < m; i++) {
for (int j = 0; j < n; j++) {
need[i][j] = max[i][j] - allocation[i][j];
}
}
}
int isRequestLessThanAvailable(int request[], int available[], int n) {
for (int i = 0; i < n; i++) {
if (request[i] > available[i]) {
return 0;
}
}
return 1;
}
int checkIfRequestCanBeGranted(int request[], int available[], int allocation[][10], int
need[][10], int m, int n) {
int tempAvailable[10], tempAllocation[10][10], tempNeed[10][10];
for (int i = 0; i < n; i++) {
tempAvailable[i] = available[i];
}
for (int i = 0; i < m; i++) {
for (int j = 0; j < n; j++) {
tempAllocation[i][j] = allocation[i][j];
tempNeed[i][j] = need[i][j];
}
}
if (!isRequestLessThanAvailable(request, available, n)) {
return 0;
}
for (int i = 0; i < n; i++) {
tempAvailable[i] -= request[i];
tempAllocation[0][i] += request[i];
tempNeed[0][i] -= request[i];
}
int work[10], finish[10], safe = 0;
for (int i = 0; i < n; i++) {
work[i] = tempAvailable[i];
}
for (int i = 0; i < m; i++) {
finish[i] = 0;
}
while (safe < m) {
int found = 0;
for (int i = 0; i < m; i++) {
if (!finish[i]) {
int canFinish = 1;
for (int j = 0; j < n; j++) {
if (tempNeed[i][j] > work[j]) {
canFinish = 0;
break;
}
}
if (canFinish) {
for (int j = 0; j < n; j++) {
work[j] += tempAllocation[i][j];
}
finish[i] = 1;
safe++;
found = 1;
}
}
}
if (!found) {
return 0;
}
}
return 1;
}
void displayMatrix(int matrix[][10], int m, int n) {
for (int i = 0; i < m; i++) {
for (int j = 0; j < n; j++) {
printf("%d ", matrix[i][j]);
}
printf("\n");
}
}
int main() {
int m, n;
printf("Enter the number of processes (m): ");
scanf("%d", &m);
printf("Enter the number of resource types (n): ");
scanf("%d", &n);
int available[10], allocation[10][10], max[10][10], need[10][10];
printf("Enter the available instances for each resource type:\n");
for (int i = 0; i < n; i++) {
scanf("%d", &available[i]);
}
printf("Enter the allocation matrix (each row represents a process):\n");
for (int i = 0; i < m; i++) {
for (int j = 0; j < n; j++) {
scanf("%d", &allocation[i][j]);
}
}
printf("Enter the maximum matrix (each row represents a process):\n");
for (int i = 0; i < m; i++) {
for (int j = 0; j < n; j++) {
scanf("%d", &max[i][j]);
}
}
calculateNeedMatrix(need, max, allocation, m, n);
printf("\nNeed Matrix:\n");
displayMatrix(need, m, n);
int request[10];
int process;
printf("\nEnter the process number (0 to %d) requesting resources: ", m - 1);
scanf("%d", &process);
printf("Enter the request for each resource type:\n");
for (int i = 0; i < n; i++) {
scanf("%d", &request[i]);
}
if (checkIfRequestCanBeGranted(request, available, allocation, need, m, n)) {
printf("\nThe request can be granted immediately.\n");
} else {
printf("\nThe request cannot be granted immediately.\n");
}
return 0;
}
